name: Build Linux Packages

on:
  push:
    branches: [ main ]
    paths:
      - 'main_new.py'
      - 'requirements.txt'
      - '*.spec'
      - '.github/workflows/build-linux.yml'
  pull_request:
    branches: [ main ]

jobs:
  build-linux-variants:
    strategy:
      matrix:
        include:
          - name: "Modern Linux (Ubuntu 22.04)"
            os: ubuntu-22.04
            python: "3.12"
            output: "HaioSmartApp-linux-modern"
            
          - name: "Compatible Linux (Ubuntu 20.04)"
            os: ubuntu-20.04
            python: "3.9"
            output: "HaioSmartApp-linux-compat"
            
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev binutils
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Check system info
      run: |
        echo "Building on: $(lsb_release -d)"
        echo "Python version: $(python --version)"
        echo "GLIBC version: $(ldd --version | head -1)"
    
    - name: Build executable
      run: |
        pyinstaller s3_mounter.spec \
          --clean \
          --noconfirm \
          --exclude-module=_tkinter \
          --exclude-module=tkinter
        mv dist/HaioSmartApp dist/${{ matrix.output }}
    
    - name: Check GLIBC requirements
      run: |
        echo "GLIBC requirements:"
        objdump -T dist/${{ matrix.output }} | grep GLIBC | sort -V | tail -5 || true
        echo ""
        echo "File info:"
        file dist/${{ matrix.output }}
        ls -lh dist/${{ matrix.output }}
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.output }}
        path: dist/${{ matrix.output }}

  build-debian12:
    runs-on: ubuntu-latest
    name: "Debian 12 Compatible"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build with Debian 12 Docker
      run: |
        cat > Dockerfile.debian12 << 'EOF'
        FROM debian:12-slim
        
        RUN apt-get update && apt-get install -y \
            python3 \
            python3-pip \
            python3-venv \
            python3-dev \
            build-essential \
            binutils \
            file \
            && rm -rf /var/lib/apt/lists/*
        
        WORKDIR /app
        COPY . .
        
        RUN python3 -m pip install --break-system-packages --upgrade pip
        RUN python3 -m pip install --break-system-packages -r requirements.txt
        RUN python3 -m pip install --break-system-packages pyinstaller
        
        RUN pyinstaller s3_mounter.spec --clean --noconfirm
        RUN mv dist/HaioSmartApp dist/HaioSmartApp-debian12
        
        # Check requirements
        RUN echo "GLIBC requirements:" && \
            objdump -T dist/HaioSmartApp-debian12 | grep GLIBC | sort -V | tail -5 || true
        RUN echo "File info:" && file dist/HaioSmartApp-debian12
        EOF
        
        docker build -f Dockerfile.debian12 -t haiosmartapp-debian12 .
        docker create --name extract haiosmartapp-debian12
        docker cp extract:/app/dist/HaioSmartApp-debian12 ./
        docker rm extract
        
        mkdir -p dist
        mv HaioSmartApp-debian12 dist/
    
    - name: Upload Debian 12 artifact
      uses: actions/upload-artifact@v4
      with:
        name: HaioSmartApp-debian12
        path: dist/HaioSmartApp-debian12

  build-appimage:
    runs-on: ubuntu-20.04
    name: "Universal AppImage"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          python3-dev \
          fuse \
          libfuse2 \
          wget \
          desktop-file-utils \
          file
        
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Download AppImage tools
      run: |
        wget -q -O linuxdeploy-x86_64.AppImage \
          https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget -q -O linuxdeploy-plugin-python-x86_64.AppImage \
          https://github.com/linuxdeploy/linuxdeploy-plugin-python/releases/download/continuous/linuxdeploy-plugin-python-x86_64.AppImage
        chmod +x *.AppImage
    
    - name: Create AppDir
      run: |
        mkdir -p HaioSmartApp.AppDir/usr/{bin,share/applications,share/icons/hicolor/256x256/apps}
        
        # Copy files
        cp main_new.py HaioSmartApp.AppDir/usr/bin/
        cp requirements.txt HaioSmartApp.AppDir/usr/bin/
        cp haio-logo.png HaioSmartApp.AppDir/usr/share/icons/hicolor/256x256/apps/haiosmartapp.png
        
        # Desktop file
        cat > HaioSmartApp.AppDir/usr/share/applications/haiosmartapp.desktop << 'EOF'
        [Desktop Entry]
        Type=Application
        Name=Haio Smart App
        Comment=Smart S3 bucket mounting application
        Exec=main_new.py
        Icon=haiosmartapp
        Categories=Utility;Network;System;
        EOF
        
        # AppRun
        cat > HaioSmartApp.AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        export PATH="${HERE}/usr/bin:${PATH}"
        export PYTHONPATH="${HERE}/usr/lib/python3/site-packages:${PYTHONPATH}"
        cd "${HERE}/usr/bin"
        exec python3 main_new.py "$@"
        EOF
        chmod +x HaioSmartApp.AppDir/AppRun
    
    - name: Build AppImage
      run: |
        export LINUXDEPLOY_PLUGIN_PYTHON_APPIMAGE=linuxdeploy-plugin-python-x86_64.AppImage
        
        ./linuxdeploy-x86_64.AppImage \
          --appdir HaioSmartApp.AppDir \
          --plugin python \
          --output appimage \
          --desktop-file HaioSmartApp.AppDir/usr/share/applications/haiosmartapp.desktop \
          --icon-file HaioSmartApp.AppDir/usr/share/icons/hicolor/256x256/apps/haiosmartapp.png
        
        # Find and rename the AppImage
        mv HaioSmartApp-*.AppImage HaioSmartApp.AppImage || mv Haio_Smart_App-*.AppImage HaioSmartApp.AppImage
        
        echo "AppImage created:"
        file HaioSmartApp.AppImage
        ls -lh HaioSmartApp.AppImage
    
    - name: Upload AppImage
      uses: actions/upload-artifact@v4
      with:
        name: HaioSmartApp-AppImage
        path: HaioSmartApp.AppImage

  summary:
    needs: [build-linux-variants, build-debian12, build-appimage]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create build summary
      run: |
        echo "## Linux Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Package | Size | Target |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|------|--------|" >> $GITHUB_STEP_SUMMARY
        
        for dir in */; do
          if [ -f "${dir%/}/${dir%/}" ]; then
            size=$(ls -lh "${dir%/}/${dir%/}" | awk '{print $5}')
            echo "| ${dir%/} | $size | See description |" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Package Descriptions:" >> $GITHUB_STEP_SUMMARY
        echo "- **HaioSmartApp-linux-modern**: Built on Ubuntu 22.04 with Python 3.12 (latest features)" >> $GITHUB_STEP_SUMMARY
        echo "- **HaioSmartApp-linux-compat**: Built on Ubuntu 20.04 with Python 3.9 (better compatibility)" >> $GITHUB_STEP_SUMMARY
        echo "- **HaioSmartApp-debian12**: Built on Debian 12 (resolves GLIBC issues)" >> $GITHUB_STEP_SUMMARY
        echo "- **HaioSmartApp-AppImage**: Universal package (works on most Linux distributions)" >> $GITHUB_STEP_SUMMARY
